@use '@angular/material' as mat;
@use './m3-theme';
@use "sass:selector";

/// Gets a color from a theme object. This function can take 2 or 3 arguments. If 2 arguments are
/// passed, the second argument is treated as the name of a color role. If 3 arguments are passed,
/// the second argument is treated as the name of a color palette (primary, secondary, etc.) and the
/// third is treated as the palette hue (10, 50, etc.)
/// @param {Map} $theme The theme
/// @param {String} $color The name of the color role to get, or the name of a
///   color palette.
/// @param {Number} $hue The palette hue to get (passing this argument means the second argument is
///   interpreted as a palette name).
/// @param {String} $property The CSS font property to get
/// @return {Color} The requested theme color.
@mixin color($theme, $color, $hue, $property, $opacity) {
  @if mat.theme-has($theme, color) {
    #{$property}: rgba(mat.get-theme-color($theme, $color, $hue), $opacity);
  }
}

/// Gets a typography value from a theme object.
/// @param {Map} $theme The theme
/// @param {String} $typescale The typescale name.
/// @param {String} $property The CSS font property to get
///   (font, font-family, font-size, font-weight, line-height, or letter-spacing).
/// @return {*} The value of the requested font property.
@mixin typography($theme, $typescale, $property) {
  @if mat.theme-has($theme, typography) {
    #{$property}: mat.get-theme-typography($theme, $typescale, $property);
  }
}

@mixin theme-color($property, $color, $hue, $opacity: 1) {
   // Apply the dark theme by default
   @include color(m3-theme.$dark-theme, $color, 100 - $hue, $property, $opacity);

   // Apply the light theme only when the user prefers light themes.
   @media (prefers-color-scheme: light) {
    @at-root html:not([dark-theme]) :host #{&} {
       @include color(m3-theme.$light-theme, $color, $hue, $property, $opacity);
     }
   }
}

@mixin theme-typography($property, $typescale) {
  // Apply the dark theme by default
  @include typography(m3-theme.$dark-theme, $typescale, $property);

  // Apply the light theme only when the user prefers light themes.
  @media (prefers-color-scheme: light) {
    @at-root html:not([dark-theme]) :host #{&} {
      @include typography(m3-theme.$light-theme, $typescale, $property);
    }
  }
}
